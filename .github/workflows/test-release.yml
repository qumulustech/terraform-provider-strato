# Test Release Workflow
# This workflow can be triggered manually to test the release process
# without creating an actual release tag.
name: Test Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual release)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  id-token: write

jobs:
  test-goreleaser:
    # TEMPORARY: Removed group: prod - uncomment to restore
    # runs-on:
    #   group: prod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5 # v5.0.0
        with:
          fetch-depth: 0

      # TEMPORARY: Using repository secrets instead of Vault - uncomment below to restore Vault
      # - name: Fetch secrets from Vault
      #   uses: QumulusTechnology/vault-setup-action@v3
      #   with:
      #     aws_account_data: ${{ secrets.AWS_ACCOUNT_DATA }}
      #     vault_addr: ${{ secrets.VAULT_ADDR }}
      #     platform: qcp
      #     secrets: |
      #       secret/data/qcp/global/automation-user-gpg-key private-key | GPG_PRIVATE_KEY;
      #       secret/data/qcp/global/automation-user-gpg-key public-key | GPG_PUBLIC_KEY;
      #       secret/data/qcp/global/automation-user-github-token token | GITHUB_ACCESS_TOKEN;
      #       secret/data/qcp/global/github-automation-user-ssh-key private_key | SSH_PRIVATE_KEY;

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          # TEMPORARY: Using repository secret directly (OLD: ${{ env.SSH_PRIVATE_KEY }})
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Git for private modules
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global url."git@github.com:".insteadOf "https://github.com/"
        env:
          GOPRIVATE: github.com/QumulusTechnology/*

      - name: Set up Go
        uses: actions/setup-go@v6 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: true
        env:
          GOPRIVATE: github.com/QumulusTechnology/*

      # TEMPORARY: Updated to use repository secrets - restore when reverting to Vault
      - name: Verify secrets were fetched
        run: |
          if [ -z "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "❌ ERROR: GPG_PRIVATE_KEY is empty"
            exit 1
          else
            echo "✅ GPG_PRIVATE_KEY fetched successfully"
            echo "Key length: ${#GPG_PRIVATE_KEY} characters"
          fi

          if [ -z "${{ secrets.GPG_PUBLIC_KEY }}" ]; then
            echo "❌ ERROR: GPG_PUBLIC_KEY is empty"
            exit 1
          else
            echo "✅ GPG_PUBLIC_KEY fetched successfully"
          fi

          if [ -z "${{ secrets.GH_ACCESS_TOKEN }}" ]; then
            echo "❌ ERROR: GH_ACCESS_TOKEN is empty"
            exit 1
          else
            echo "✅ GH_ACCESS_TOKEN fetched successfully"
          fi
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        id: import_gpg
        with:
          # TEMPORARY: Using repository secret directly (OLD: ${{ env.GPG_PRIVATE_KEY }})
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ''

      - name: Verify GPG import
        run: |
          echo "✅ GPG key imported successfully"
          echo "Fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
          echo "Key ID: ${{ steps.import_gpg.outputs.keyid }}"
          echo "Name: ${{ steps.import_gpg.outputs.name }}"
          echo "Email: ${{ steps.import_gpg.outputs.email }}"

          # List GPG keys
          echo ""
          echo "Available GPG keys:"
          gpg --list-secret-keys --keyid-format=long

      - name: Create temporary tag for testing
        if: github.event.inputs.dry_run == 'true'
        run: |
          # Create a temporary tag for testing
          TEST_TAG="v0.0.0-test-$(date +%s)"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TEST_TAG" -m "Test release tag"
          echo "TEST_TAG=$TEST_TAG" >> $GITHUB_ENV
          echo "Created test tag: $TEST_TAG"

      - name: Run GoReleaser (Snapshot/Dry-run)
        if: github.event.inputs.dry_run == 'true'
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          version: latest
          args: release --snapshot --clean --skip=publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GOPRIVATE: github.com/QumulusTechnology/*

      - name: Run GoReleaser (Actual Release)
        if: github.event.inputs.dry_run == 'false'
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GOPRIVATE: github.com/QumulusTechnology/*

      - name: List generated artifacts
        run: |
          echo "📦 Generated artifacts:"
          ls -lah dist/ || echo "No dist directory found"

          echo ""
          echo "📋 Checksums file:"
          find dist/ -name "*SHA256SUMS" -exec cat {} \; || echo "No checksums file found"

          echo ""
          echo "🔐 Signature file:"
          find dist/ -name "*SHA256SUMS.sig" -exec ls -lh {} \; || echo "No signature file found"

      - name: Verify signature
        run: |
          SUMS_FILE=$(find dist/ -name "*SHA256SUMS" | head -n 1)
          SIG_FILE=$(find dist/ -name "*SHA256SUMS.sig" | head -n 1)

          if [ -f "$SUMS_FILE" ] && [ -f "$SIG_FILE" ]; then
            echo "Verifying GPG signature..."
            gpg --verify "$SIG_FILE" "$SUMS_FILE"
            if [ $? -eq 0 ]; then
              echo "✅ Signature verification successful!"
            else
              echo "❌ Signature verification failed!"
              exit 1
            fi
          else
            echo "⚠️  Checksums or signature file not found"
            exit 1
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: test-release-artifacts
          path: dist/
          retention-days: 7

      - name: Test Summary
        if: always()
        run: |
          echo "## 🧪 Test Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run Mode**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GPG Fingerprint**: ${{ steps.import_gpg.outputs.fingerprint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GPG Key ID**: ${{ steps.import_gpg.outputs.keyid }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "dist" ]; then
            echo "### 📦 Generated Artifacts:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            ls -lh dist/ >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
